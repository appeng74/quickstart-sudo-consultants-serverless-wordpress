---
AWSTemplateFormatVersion: "2010-09-09"
Description:
  Creates an ECS Cluster, Application load balancer and related resources. **WARNING** You will be billed for the AWS resources used if you create a stack from this template.
Parameters:
  PublicSubnet1ID:
    Type: AWS::EC2::Subnet::Id
  PublicSubnet2ID:
    Type: AWS::EC2::Subnet::Id
  PublicSubnet3ID:
    Type: String
    Default: ""
  PrivateSubnet1ID:
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet2ID:
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet3ID:
    Type: String
    Default: ""
  FileSystemId:
    Type: String
  ContainerSecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
  LoadBalancerSecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
  DBEndpoint:
    Type: String
  DBUserName:
    Type: String
  DBUserPassword:
    Type: String
  DBName:
    Type: String
  ContainerMinSize:
    Type: Number
  ContainerMaxSize:
    Type: Number
  ContainerDesiredCapacity:
    Type: Number
  VPCID:
    Type: AWS::EC2::VPC::Id
  ContainerCpu:
    Type: String
  ContainerMemory:
    Type: String
  ContainerImage:
    Type: String
Conditions:
  3AZDeployment: !And
    - !Not [!Equals [!Ref PrivateSubnet3ID, ""]]
    - !Not [!Equals [!Ref PublicSubnet3ID, ""]]
Resources:
  DBPasswordSecret:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Name: WORDPRESS_DB_PASSWORD
      SecretString: !Ref DBUserPassword
  WordpressAccessPoint:
    Type: AWS::EFS::AccessPoint
    Properties:
      FileSystemId: !Ref FileSystemId
      RootDirectory:
        CreationInfo:
          OwnerGid: "708798"
          OwnerUid: "7987987"
          Permissions: "0755"
        Path: "/wp-content"
  Cluster:
    Type: "AWS::ECS::Cluster"
  ContainerExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
      Policies:
        - PolicyName: AccessDBAdminUserPasswordSecret
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref DBPasswordSecret
  TaskRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AccessDBAdminUserPasswordSecret
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref DBPasswordSecret
  TaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: !Ref ContainerCpu
      Memory: !Ref ContainerMemory
      ExecutionRoleArn: !GetAtt ContainerExecutionRole.Arn
      TaskRoleArn: !Ref TaskRole
      Volumes:
        - Name: efs-wp-content
          EFSVolumeConfiguration:
            AuthorizationConfig:
              AccessPointId: !Ref WordpressAccessPoint
              IAM: DISABLED
            FilesystemId: !Ref FileSystemId
            TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: !Join ["-", [!Ref "AWS::StackName", "Container"]]
          Image: !Ref ContainerImage
          PortMappings:
            - ContainerPort: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref "AWS::Region"
              awslogs-group: !Ref TaskLogGroup
              awslogs-stream-prefix: !Ref "AWS::StackName"
          MountPoints:
            - SourceVolume: "efs-wp-content"
              ContainerPath: "/var/www/html/wp-content"
              ReadOnly: false
          Secrets:
            - Name: WORDPRESS_DB_PASSWORD
              ValueFrom: !Ref DBPasswordSecret
          Environment:
            - Name: WORDPRESS_DB_HOST
              Value: !Ref DBEndpoint
            - Name: WORDPRESS_DB_NAME
              Value: !Ref DBName
            - Name: WORDPRESS_DB_USER
              Value: !Ref DBUserName
            - Name: WORDPRESS_CONFIG_EXTRA
              Value: !Sub define('WP_HOME','http://${ApplicationLoadBalancer.DNSName}');define('WP_SITEURL','http://${ApplicationLoadBalancer.DNSName}');define('CONCATENATE_SCRIPTS', false);define('WPINV_USE_PHP_SESSIONS', false);define('FS_METHOD','direct');
  Service:
    Type: "AWS::ECS::Service"
    DependsOn:
      - ALBListenerHTTP
    Properties:
      ServiceName: !Join ["-", [!Ref AWS::StackName, "Service"]]
      Cluster: !Ref Cluster
      TaskDefinition: !Ref TaskDefinition
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      DesiredCount: !Ref ContainerDesiredCapacity
      HealthCheckGracePeriodSeconds: 200
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets: !If
            - 3AZDeployment
            - [
                !Ref PrivateSubnet1ID,
                !Ref PrivateSubnet2ID,
                !Ref PrivateSubnet3ID,
              ]
            - [!Ref PrivateSubnet1ID, !Ref PrivateSubnet2ID]
          SecurityGroups: [!Ref ContainerSecurityGroupId]
      LoadBalancers:
        - ContainerName: !Join ["-", [!Ref AWS::StackName, "Container"]]
          ContainerPort: 80
          TargetGroupArn: !Ref ALBTargetGroup
  ApplicationLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Subnets: !If
        - 3AZDeployment
        - [!Ref PublicSubnet1ID, !Ref PublicSubnet2ID, !Ref PublicSubnet3ID]
        - [!Ref PublicSubnet1ID, !Ref PublicSubnet2ID]
      SecurityGroups: [!Ref LoadBalancerSecurityGroupId]
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: "60"
      Scheme: internet-facing
      Tags:
        - Key: Name
          Value: WordpressALB
  ALBTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      VpcId: !Ref VPCID
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      HealthCheckPort: "80"
      HealthCheckProtocol: HTTP
      Port: 80
      Matcher:
        HttpCode: "200,301"
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      TargetType: ip
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: "true"
        - Key: stickiness.type
          Value: lb_cookie
        - Key: stickiness.lb_cookie.duration_seconds
          Value: "30"
        - Key: deregistration_delay.timeout_seconds
          Value: "60"
  ALBListenerHTTP:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      Port: 80
      Protocol: HTTP
  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole
  TaskLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Join ["", [/ecs/, !Ref "AWS::StackName"]]
  AutoScalingTarget:
    Type: "AWS::ApplicationAutoScaling::ScalableTarget"
    Properties:
      MinCapacity: !Ref ContainerMinSize
      MaxCapacity: !Ref ContainerMaxSize
      ResourceId: !Join ["/", [service, !Ref Cluster, !GetAtt Service.Name]]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !GetAtt AutoScalingRole.Arn
  AutoScalingPolicy:
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Properties:
      PolicyName: !Join ["", [!Ref "AWS::StackName", AutoScalingPolicy]]
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: "ECSServiceAverageCPUUtilization"
        ScaleInCooldown: 10
        ScaleOutCooldown: 10
        TargetValue: 75
Outputs:
  ApplicationLoadBalancerDNSName:
    Description: "The URL of the ELB. Point your domain to it by using a CNAME/ALIAS DNS record"
    Value: !GetAtt ApplicationLoadBalancer.DNSName
  ApplicationLoadBalancerName:
    Description: "Application load balancer name"
    Value: !GetAtt ApplicationLoadBalancer.LoadBalancerName
  DBPasswordSecret:
    Description: "The database password secret ARN"
    Value: !Ref DBPasswordSecret
  Cluster:
    Description: "Name of the ECS Cluster"
    Value: !Ref Cluster
  TaskDefinition:
    Description: "ECS cluster task definition ARN"
    Value: !Ref TaskDefinition
