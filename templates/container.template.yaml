---
AWSTemplateFormatVersion: "2010-09-09"
Description: WordPress Container Template.

Parameters:
  PrivateSubnets:
    ConstraintDescription: Must be list of existing subnet Ids
    Default: ""
    Description:
      A list of subnet identifiers of Amazon VPCs where the WebServer Autoscaling
      would be launched
    Type: List<AWS::EC2::Subnet::Id>
  PublicSubnets:
    ConstraintDescription: Must be list of existing subnet Ids
    Default: ""
    Description:
      A list of subnet identifiers of Amazon VPCs where the WebServer Autoscaling
      would be launched
    Type: List<AWS::EC2::Subnet::Id>
  EFSSecurityGroup:
    Description: EFS Security Group
    Type: AWS::EC2::SecurityGroup::Id
  ContainerSecurityGroup:
    Description: Container Security Group
    Type: AWS::EC2::SecurityGroup::Id
  DBEndpointAddress:
    Description: Aurora DB Endpoint
    Type: String
  DBMasterUserPassword:
    AllowedPattern: (?=\S)[^@/"\r\n\t\f\s]*
    ConstraintDescription: Min 8 chars. Cannot contain white space, @, /, "
    Description:
      8-41 character, alphanumeric string to be used as the database admin
      account password (database admin username is 'root').
    MaxLength: "41"
    MinLength: "8"
    NoEcho: "True"
    Type: String
  ContainerMinSize:
    Default: "1"
    Description:
      Minimum number of WordPress EC2 containers in the Auto Scaling group.
      It specifies the minimum number of replicas when scaling down.
    Type: Number
  ContainerMaxSize:
    Default: "10"
    Description:
      Maximum number of WordPress EC2 containers in the Auto Scaling group.
      It specifies the maximum number of replicas when scaling up.
    Type: Number
  ContainerDesiredCapacity:
    Default: "2"
    Description:
      Desired number of WordPress containers. This will set the number of
      containers when the scaling group is created, then the autoscaler will increase
      or decrease the current number of containers as the scaling events occur.
    Type: Number
  VPCID:
    Description: The ID of your existing VPC (e.g. vpc-123456789)
    Type: AWS::EC2::VPC::Id
  ALBSecurityGroup:
    Description: ALB Security Group
    Type: AWS::EC2::SecurityGroup::Id
  ContainerCpu:
    Type: String
    Default: "256"
    AllowedValues:
      - "256"
      - "512"
      - "1024"
      - "2048"
      - "4096"
  ContainerMemory:
    Type: String
    Default: "0.5GB"
  ContainerImage:
    Type: String
    Default: "docker.io/wordpress:latest"
  DBName:
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    Description: Database name for WordPress Stack
    MaxLength: 64
    MinLength: 5
    Type: String
  NumberOfPrivateSubnets:
    AllowedValues:
      - "2"
      - "3"
      - "4"
    Default: "2"
    Description: Number of Private subnets to use in the VPC . This must match your selections in the list of PrivateSubnets parameter.
    Type: String

Conditions:
  3AZCondition: !Or
    - !Equals [!Ref NumberOfPrivateSubnets, "3"]
    - !Condition "4AZCondition"
  4AZCondition: !Equals [!Ref NumberOfPrivateSubnets, "4"]

Resources:
  WordpressEFS:
    Type: AWS::EFS::FileSystem
    Properties:
      PerformanceMode: generalPurpose
      Encrypted: true
  WordpressEFSMountTarget1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref WordpressEFS
      SubnetId: !Select
        - 0
        - !Ref PrivateSubnets
      SecurityGroups:
        - !Ref EFSSecurityGroup
  WordpressEFSMountTarget2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref WordpressEFS
      SubnetId: !Select
        - 1
        - !Ref PrivateSubnets
      SecurityGroups:
        - !Ref EFSSecurityGroup
  WordpressEFSMountTarget3:
    Condition: 3AZCondition
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref WordpressEFS
      SubnetId: !Select
        - 2
        - !Ref PrivateSubnets
      SecurityGroups:
        - !Ref EFSSecurityGroup
  WordpressEFSMountTarget4:
    Condition: 4AZCondition
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref WordpressEFS
      SubnetId: !Select
        - 3
        - !Ref PrivateSubnets
      SecurityGroups:
        - !Ref EFSSecurityGroup

  WordpressAccessPoint:
    Type: AWS::EFS::AccessPoint
    Properties:
      FileSystemId: !Ref WordpressEFS
      RootDirectory:
        CreationInfo:
          OwnerGid: "708798"
          OwnerUid: "7987987"
          Permissions: "0755"
        Path: "/wp-content"

  Cluster:
    Type: AWS::ECS::Cluster
  ContainerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: AccessDBMasterUserPasswordSecret
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref DBPasswordSecret
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AccessDBMasterUserPasswordSecret
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref DBPasswordSecret

  DBPasswordSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: WORDPRESS_DB_PASSWORD
      SecretString: !Sub '{"WORDPRESS_DB_PASSWORD":"${DBMasterUserPassword}"}'

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: !Ref ContainerCpu
      Memory: !Ref ContainerMemory
      ExecutionRoleArn: !GetAtt ContainerExecutionRole.Arn
      TaskRoleArn: !Ref TaskRole
      Volumes:
        - Name: efs-wp-content
          EFSVolumeConfiguration:
            AuthorizationConfig:
              AccessPointId: !Ref WordpressAccessPoint
              IAM: DISABLED
            FilesystemId: !Ref WordpressEFS
            TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: !Join ["-", [!Ref AWS::StackName, "Container"]]
          Image: !Ref ContainerImage
          PortMappings:
            - ContainerPort: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref TaskLogGroup
              awslogs-stream-prefix: !Ref AWS::StackName
          MountPoints:
            - SourceVolume: "efs-wp-content"
              ContainerPath: "/var/www/html/wp-content"
              ReadOnly: false
          Secrets:
            - Name: WORDPRESS_DB_PASSWORD
              ValueFrom: !Ref DBPasswordSecret
          Environment:
            - Name: WORDPRESS_DB_HOST
              Value: !Ref DBEndpointAddress
            - Name: WORDPRESS_DB_NAME
              Value: !Ref DBName
            - Name: WORDPRESS_DB_USER
              Value: admin
            - Name: WORDPRESS_CONFIG_EXTRA
              Value: !Sub define('WP_HOME','http://${ApplicationLoadBalancer.DNSName}');define('WP_SITEURL','http://${ApplicationLoadBalancer.DNSName}');define('CONCATENATE_SCRIPTS', false);define('WPINV_USE_PHP_SESSIONS', false);define('FS_METHOD','direct');

  Service:
    Type: AWS::ECS::Service
    DependsOn:
      - ALBListenerHTTP
    Properties:
      ServiceName: !Join ["-", [!Ref AWS::StackName, "Service"]]
      Cluster: !Ref Cluster
      TaskDefinition: !Ref TaskDefinition
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      DesiredCount: !Ref ContainerDesiredCapacity
      HealthCheckGracePeriodSeconds: 200
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets: !Ref PrivateSubnets
          SecurityGroups:
            - !Ref ContainerSecurityGroup
      LoadBalancers:
        - ContainerName: !Join ["-", [!Ref AWS::StackName, "Container"]]
          ContainerPort: 80
          TargetGroupArn: !Ref ALBTargetGroup
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: "60"
      Scheme: internet-facing
      Subnets: !Ref PublicSubnets
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: WordpressALB
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      HealthCheckPort: "80"
      HealthCheckProtocol: HTTP
      Port: 80
      Matcher:
        HttpCode: "200,301"
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref VPCID
      TargetType: ip
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: "true"
        - Key: stickiness.type
          Value: lb_cookie
        - Key: stickiness.lb_cookie.duration_seconds
          Value: "30"
        - Key: deregistration_delay.timeout_seconds
          Value: "60"

  ALBListenerHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole
  TaskLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ["", [/ecs/, !Ref AWS::StackName]]
  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !Ref ContainerMinSize
      MaxCapacity: !Ref ContainerMaxSize
      ResourceId: !Join ["/", [service, !Ref Cluster, !GetAtt Service.Name]]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !GetAtt AutoScalingRole.Arn

  AutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Join ["", [!Ref AWS::StackName, AutoScalingPolicy]]
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 10
        ScaleOutCooldown: 10
        TargetValue: 75

Outputs:
  ELBURL:
    Description: The URL of the ELB. Point your domain to it by using a CNAME/ALIAS DNS record
    Value: !GetAtt ApplicationLoadBalancer.DNSName
